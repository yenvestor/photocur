export interface BrightnessContrastOptions {
  brightness: number;
  contrast: number;
}

export interface LevelsOptions {
  shadows: number;
  midtones: number;
  highlights: number;
}

export interface HueSaturationOptions {
  hue: number;
  saturation: number;
  lightness: number;
}

export function applyBrightnessContrast(canvas: HTMLCanvasElement, options: BrightnessContrastOptions): void {
  console.log('Applying brightness/contrast:', options);
}

export function applyLevels(canvas: HTMLCanvasElement, options: LevelsOptions): void {
  console.log('Applying levels:', options);
}

export function applyHueSaturation(canvas: HTMLCanvasElement, options: HueSaturationOptions): void {
  console.log('Applying hue/saturation:', options);
}

export function convertToGrayscale(canvas: HTMLCanvasElement): void {
  const ctx = canvas.getContext('2d')!;
  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  const data = imageData.data;
  
  for (let i = 0; i < data.length; i += 4) {
    const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;
    data[i] = gray;
    data[i + 1] = gray;
    data[i + 2] = gray;
  }
  
  ctx.putImageData(imageData, 0, 0);
}

export function invertColors(canvas: HTMLCanvasElement): void {
  const ctx = canvas.getContext('2d')!;
  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  const data = imageData.data;
  
  for (let i = 0; i < data.length; i += 4) {
    data[i] = 255 - data[i];
    data[i + 1] = 255 - data[i + 1];
    data[i + 2] = 255 - data[i + 2];
  }
  
  ctx.putImageData(imageData, 0, 0);
}

export function applyExposure(canvas: HTMLCanvasElement, exposure: number): void {
  console.log('Applying exposure:', exposure);
}

export function applyVibrance(canvas: HTMLCanvasElement, vibrance: number): void {
  console.log('Applying vibrance:', vibrance);
}

export function applyPosterize(canvas: HTMLCanvasElement, levels: number): void {
  console.log('Applying posterize:', levels);
}

export function applyThreshold(canvas: HTMLCanvasElement, threshold: number): void {
  console.log('Applying threshold:', threshold);
}